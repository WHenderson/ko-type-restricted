!function(e,t){"function"==typeof define&&define.amd?define(["knockout","is-an"],t):"object"==typeof exports?module.exports=t(require("knockout"),require("is-an")):e.ko=t(e.ko,e.isAn)}(this,function(e,t){var r,n={}.hasOwnProperty;return r=function(e){var r,o,u,i,a;return i=function(e){return null==e||0===e.length?void 0:t.String.Literal(e)?e:e.join("|")},u=function(e){return e=i(e),t.String.Literal(e)?e.split("|"):[]},o=function(e){return/^[A-Z]/.test(e)},r=function(e){return t.Function(e)&&null!=e.typeName&&null!=e.typeNames&&null!=e.typeCheck&&null!=e.typeChecks},a=function(t,r){var n,o;if(r.validate)return o=void 0,n=function(){var n,u,i,a;return null!=e.validation&&e.validation.utils.isValidatable(t)?(n=null!=(u=r.message)?u:null!=(i=null!=(a=t.typeWriteError())?a:t.typeReadError())?i.message:void 0,null==o?(o={message:n,validator:function(){return null==t.typeWriteError()&&null==t.typeReadError()}},e.validation.addAnonymousRule(t,o)):(o.message=n,t.rules.valueHasMutated())):void 0},t.typeWriteError.subscribe(n),t.typeReadError.subscribe(n),null!=e.validation&&t.extend({validatable:!0}),r.deferEvaluation?void 0:n()},e.extenders.type=function(r,l){var c,f,d,s,p;return t.String.Literal(l)||t.Array(l)?l={type:l}:t.Function(l)&&(l={type:l.typeName,check:l}),l=e.utils.extend(e.utils.extend({},e.extenders.type.options),l),l.useDefault&&null==l.defaultFunc&&(l.defaultFunc=function(){return l["default"]}),p=u(l.type),function(){var e,t,r;r=[];for(t in l)n.call(l,t)&&(e=l[t],o(t)&&(-1===p.indexOf(t)?r.push(p.push(t)):r.push(void 0)));return r}(),s=i(p),d={},function(){var e,r,n,o,u;for(u=[],e=0,r=p.length;r>e;e++)n=p[e],u.push(d[n]=null!=(o=l[n])?o:t(n,{returnChecker:!0}));return u}(),f=function(){var e,t;return e=null!=(t=l.check)?t:function(){return!0},function(t){return e(t)&&(0===p.length||p.some(function(e){return d[e](t)}))}}(),c=e.computed({pure:l.pure,deferEvaluation:l.deferEvaluation,read:function(){var e,n,o;try{if(o=r(),!f(o))throw new TypeError("Unexpected internal type. Expected "+s+", got "+t(o))}catch(e){if(n=e,n instanceof TypeError&&(c.typeReadError(n),l.useDefault))return l.defaultFunc();throw n}return c.typeReadError(void 0),o},write:function(e){var n,o;try{if(!f(e))throw new TypeError("Unexpected external type. Expected "+s+", received "+t(e));r(e)}catch(n){if(o=n,o instanceof TypeError&&(c.typeWriteError(o),l.noThrow))return;throw o}return c.typeWriteError(void 0)}}),c.typeName=s,c.typeNames=p,c.typeCheck=f,c.typeChecks=d,c.typeWriteError=e.observable(),c.typeReadError=e.observable(),a(c,l),l.pure&&!l.deferEvaluation&&c(),c},e.extenders.type.options={validate:!0,message:void 0,noThrow:!1,useDefault:!1,pure:!0,deferEvaluation:!0},e.extenders.convert=function(l,c){var f;return function(){var a,f,d,s,p,y,h,v,m,g,w,k,C,b,E,S,N,T;(t.String(c)||t.Array(c))&&(c={type:c}),c=e.utils.extend(e.utils.extend({},e.extenders.convert.options),c),s={checkSelf:null!=(w=c.check)?w:function(){return!0},read:c.read,write:c.write,checks:{},checkers:[],isTyped:r(l),ignoreDefaultConverters:c.ignoreDefaultConverters,pure:c.pure,deferEvaluation:c.deferEvaluation,defaultFunc:c.defaultFunc,noThrow:c.noThrow,message:c.message,useDefault:c.useDefault},s.useDefault&&null==c.defaultFunc&&(s["default"]=c["default"],s.defaultFunc=function(){return s["default"]}),s.checkers.push(s.checkSelf),s.types=u(c.type);for(f in c)n.call(c,f)&&o(f)&&-1===s.types.indexOf(f)&&s.types.push(f);for(k=s.types,p=0,m=k.length;m>p;p++){f=k[p],d=null!=(C=c[f])?C:{},s[f]={checkSelf:null!=(b=null!=(E=d.check)?E:t(f,{returnChecker:!0}))?b:function(){return!0},read:d.read,write:d.write,types:u(d.type)},a=s.checkSelf,s.checkers.push(s[f].checkSelf),s.checks[f]=s[f].check=function(e){return function(t){return s.checkSelf(t)&&s[e].checkSelf(t)}}(f);for(y in d)n.call(d,y)&&o(y)&&-1===s[f].types.indexOf(y)&&s[f].types.push(y);for(S=s[f].types,v=0,g=S.length;g>v;v++)y=S[v],h=null!=(N=null!=(T=c[f])?T[y]:void 0)?N:{},s[f][y]={checkSelf:h.check,read:h.read,write:h.write},null==s[f][y].checkSelf?s[f][y].check=s[f][y].checkSelf=s[f].checkSelf:s[f][y].check=function(e,t){return function(r){return s[e].check(r)&&s[e][t].checkSelf(r)}}(f,y);s[f].type=i(s[f].types)}return s.type=i(s.types),s.check=function(e){return s.checkSelf(e)&&(0===s.checkers.length||s.checkers.some(function(t){return t(e)}))},c=s}(),f=e.computed({pure:c.pure,deferEvaluation:c.deferEvaluation,read:function(){var r,n,o,u,i,a,d,s,p,y,h,v,m,g,w,k,C,b,E,S;try{for(h=l(),a=void 0,S=function(e,t){var r,n;if(null!=e){try{a=e(h,t)}catch(r){if(n=r,!(n instanceof TypeError))throw n}if(null==n)return!0}return!1},C=c.types,d=0,g=C.length;g>d;d++)for(u=C[d],i=c[u],p=i.types,0===p.length&&null==i.read&&(p=c.isTyped?l.typeNames:[t(h)]),v=0,w=p.length;w>v;v++){if(s=p[v],c.isTyped){if(!("function"==typeof(r=l.typeChecks)[s]?r[s](h):void 0))continue}else if(!t(h,s))continue;if(y=null!=(b=i[s])?b:{check:i.check},S(y.read,y.readOptions)&&y.check(a))return a;if(u===s&&y.check(h))return a=h;if(!c.ignoreDefaultConverters&&S(e.typed.getConverter(s,u),y.readOptions)&&y.check(a))return a}for(E=c.types,m=0,k=E.length;k>m;m++)if(u=E[m],i=c[u],S(i.read,i.readOptions)&&i.check(a))return a;if(S(c.read,c.readOptions)&&c.check(a))return a;if(0===c.types.length&&c.check(a))return a=h;throw null!=c.type?new TypeError("Unable to convert from internal type "+t(h)+" to external type "+c.type):new TypeError("Unable to convert from internal type "+t(h))}catch(n){if(o=n,o instanceof TypeError&&(f.typeReadError(o),c.useDefault))return c.defaultFunc();throw o}finally{null==o&&f.typeReadError(void 0)}},write:function(r){var n,o,u,i,a,d,s,p,y,h,v,m,g,w,k,C,b;try{for(b=function(e,t){var n,o,u;if(null!=e){try{u=e(r,t)}catch(n){if(o=n,!(o instanceof TypeError))throw o}if(null==o)return l(u),!0}return!1},w=c.types,a=0,v=w.length;v>a;a++)if(u=w[a],i=c[u],i.check(r))for(s=i.types,0===s.length&&null==i.write&&(s=c.isTyped?l.typeNames:[t(r)]),y=0,m=s.length;m>y;y++)if(d=s[y],p=null!=(k=i[d])?k:{},null==p.check||p.check(r)){if(b(p.write,p.writeOptions))return;if(u===d)return void l(r);if(!c.ignoreDefaultConverters&&b(e.typed.getConverter(u,d),p.writeOptions))return}for(C=c.types,h=0,g=C.length;g>h;h++)if(u=C[h],i=c[u],i.check(r)&&b(i.write,i.writeOptions))return;if(c.check(r)){if(b(c.write,c.writeOptions))return;if(0===c.types.length)return void l(r)}throw c.isTyped?new TypeError("Unable to convert from external type "+t(r)+" to internal type "+l.typeName):new TypeError("Unable to convert from external type "+t(r))}catch(n){if(o=n,o instanceof TypeError&&(f.typeWriteError(o),c.noThrow))return;throw o}finally{null==o&&f.typeWriteError(void 0)}}}),f.typeName=c.type,f.typeNames=c.types,f.typeCheck=c.check,f.typeChecks=c.checks,f.typeReadError=e.observable(),f.typeWriteError=e.observable(),a(f,c),c.pure&&!c.deferEvaluation&&f(),f},e.extenders.convert.options={validate:!0,message:void 0,noThrow:!1,pure:!0,deferEvaluation:!0},e.typed={},function(){var r;e.typed._converters=r={},e.typed.addConverter=function(n,u,i,a,l){var c;return"undefined"!=typeof console&&null!==console&&"function"==typeof console.assert&&console.assert(o(n),"Invalid typeName "+n),"undefined"!=typeof console&&null!==console&&"function"==typeof console.assert&&console.assert(o(u),"Invalid typeName "+n),c=null!=a?null!=l?function(r,n){var o;return null==n||t.Object(n)||(o={},o[l]=n,n=o),i(r,e.utils.extend(e.utils.extend({},c.options),n))}:function(t,r){return i(t,e.utils.extend(e.utils.extend({},c.options),r))}:function(e){return i(e)},c.options=a,null==r[n]&&(r[n]={}),r[n][u]=c,e.typed},e.typed.getConverter=function(e,t){var n;return null!=(n=r[e])?n[t]:void 0},e.typed.removeConverter=function(t,n){var o,u;return null!=(null!=(o=r[t])?o[n]:void 0)&&null!=(u=r[t])&&delete u[n],e.typed}}(),function(){var e;e=function(e,t,r){return null==r||0===+r?e(t):(t=+t,r=+r,isNaN(t)||"number"!=typeof r||r%1!==0?NaN:(t=t.toString().split("e"),t=e(+(t[0]+"e"+(t[1]?+t[1]-r:-r))),t=t.toString().split("e"),+(t[0]+"e"+(t[1]?+t[1]+r:r))))},null==Math.round10&&(Math.round10=function(t,r){return e(Math.round,t,r)}),null==Math.floor10&&(Math.floor10=function(t,r){return e(Math.floor,t,r)}),null==Math.ceil10&&(Math.ceil10=function(t,r){return e(Math.ceil,t,r)})}(),e.typed.addConverter("Boolean","Number.Integer",function(e,t){return e?t.truthy:t.falsey},{truthy:1,falsey:0},"truthy"),e.typed.addConverter("Boolean","Number",function(e,t){return e?t.truthy:t.falsey},{truthy:1,falsey:0},"truthy"),e.typed.addConverter("Boolean","String",function(e,t){return e=e?t.truthy:t.falsey,t.upperCase&&(e=e.toUpperCase()),e},{upperCase:!1,truthy:"true",falsey:"false"},"upperCase"),e.typed.addConverter("Date","Moment",function(e,t){return("undefined"!=typeof moment&&null!==moment?moment:require("moment"))(e)}),e.typed.addConverter("Date","String",function(e,t){var r;return isNaN(e.valueOf())?"":(r=t.formats[t.format],e[r].apply(e,t.params))},{formats:{date:"toDateString",iso:"toISOString",json:"toJSON",localeDate:"toLocaleDateString",localeTime:"toLocaleTimeString",locale:"toLocaleString",time:"toTimeString",utc:"toUTCString","default":"toString"},format:"default",params:[]},"format"),e.typed.addConverter("Date","Undefined",function(e,t){if(!isNaN(e.valueOf()))throw new TypeError("Unable to convert from valid Date to Undefined");return void 0}),e.typed.addConverter("Moment","Date",function(e,t){return e.toDate()}),e.typed.addConverter("Moment","String",function(e,t){return e.isValid()?e.locale(t.locale).format(t.format):""},{strict:!1,locale:"en",format:"L"},"format"),e.typed.addConverter("Moment","Undefined",function(e,t){if(e.isValid())throw new TypeError("Unable to convert from valid Moment to Undefined");return void 0}),e.typed.addConverter("Number","Boolean",function(e,t){if(null!=t.falsey&&e===t.falsey)return!1;if(null!=t.truthy&&e===t.truthy)return!0;if(null==t.falsey)return!1;if(null==t.truthy)return!0;throw new TypeError("Cannot convert from "+e+" to Boolean")},{truthy:void 0,falsey:0}),e.typed.addConverter("Number","Number.Integer",function(e,t){var r;return(r="string"==typeof t.mode?Math[t.mode]:t.mode)(e)},{mode:"round"},"mode"),e.typed.addConverter("Number","String",function(e,t){return null!=t.decimals?(e=Math.round10(e,-t.decimals),e=e.toFixed(t.decimals)):e=e.toString(),e},{decimals:void 0},"decimals"),e.typed.addConverter("Number.Integer","Boolean",function(e,t){if(null!=t.falsey&&e===t.falsey)return!1;if(null!=t.truthy&&e===t.truthy)return!0;if(null==t.falsey)return!1;if(null==t.truthy)return!0;throw new TypeError("Cannot convert from "+e+" to Boolean")},{truthy:void 0,falsey:0}),e.typed.addConverter("Number.Integer","Number",function(e,t){return e}),e.typed.addConverter("Number.Integer","String",function(e,t){return e=e.toString(t.base),t.upperCase&&(e=e.toUpperCase()),e},{base:10,upperCase:!1},"base"),e.typed.addConverter("String","Boolean",function(e,t){var r,n,o,u,i,a,l,c;if(t.trim&&(e=e.trim()),t.ignoreCase&&(e=e.toLowerCase()),t.strict){if(e===t.truthy[0])return!0;if(e===t.falsey[0])return!1}else{for(a=t.truthy,n=0,u=a.length;u>n;n++)if(c=a[n],e===c)return!0;for(l=t.falsey,o=0,i=l.length;i>o;o++)if(r=l[o],e===r)return!1}throw new TypeError("Cannot convert from "+e+" to Boolean")},{ignoreCase:!0,strict:!1,truthy:["true","t","1","-1","yes","y"],falsey:["false","f","0","no","n"],trim:!1},"strict"),e.typed.addConverter("String","Date",function(e,t){var r;if(t.trim&&(e=e.trim()),r=new Date(e),isNaN(r.valueOf()))throw TypeError("Unable to convert from "+e+" to Date");return r},{trim:!1}),e.typed.addConverter("String","Moment",function(e,t){var r;if(t.trim&&(e=e.trim()),r=("undefined"!=typeof moment&&null!==moment?moment:require("moment"))(e,t.format,t.language,t.strict),!r.isValid())throw new TypeError("Unable to convert from "+e+" to Moment");return r},{strict:!1,language:"en",format:"L",trim:!1},"format"),e.typed.addConverter("String","Number.Integer",function(t,r){var n,o,u,i;if(r.trim&&(t=t.trim()),10===r.base&&!r.strict)try{return e.typed.getConverter("String","Number")(t,0)}catch(o){throw u=o,new TypeError("Unable to convert from "+t+" to Number.Integer")}if(n="0123456789abcdefghijklmnopqrstuvwxyz",!RegExp("^(\\-|\\+)?["+n.slice(0,null!=(i=r.base)?i:10)+"]+$",r.strict?void 0:"i").test(t))throw new TypeError("Unable to convert from "+t+" to Number.Integer");return parseInt(t,r.base)},{base:10,strict:!1,trim:!1},"base"),e.typed.addConverter("String","Number",function(e,t){if(t.trim&&(e=e.trim()),!/^(\+|\-)?[0-9]+(\.?)[0-9]*$/.test(e))throw new TypeError("Unable to convert from "+e+" to Number");return e=parseFloat(e,t.base),null!=t.decimals&&(e=Math.round10(e,-t.decimals)),e},{decimals:void 0,trim:!1},"decimals"),e.typed.addConverter("String","Undefined",function(e,t){if(t.trim&&(e=e.trim()),0!==e.length)throw new TypeError("Unable to convert from "+e+" to Undefined");return void 0},{trim:!1}),e.typed.addConverter("Undefined","Date",function(e){return new Date("")}),e.typed.addConverter("Undefined","String",function(e){return""}),e.typed.addConverter("Undefined","Moment",function(e){return require("moment")("")}),e},r(e),e});
//# sourceMappingURL=data:application/json;base64,
