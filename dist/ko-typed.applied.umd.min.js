!function(e,t){"function"==typeof define&&define.amd?define(["knockout","is-an"],t):"object"==typeof exports?module.exports=t(require("knockout"),require("is-an")):e.ko=t(e.ko,e.isAn)}(this,function(e,t){var r,n=[].slice,o={}.hasOwnProperty;return r=function(e){var r,i,a,u,l,c,f,d,s,p,y,m,v,h,g,w;return e.typed={},u=function(){return!0},i=function(){return!1},a=function(e){return e},v=function(e){return null==e||0===e.length?void 0:t.String.Literal(e)?e:e.join("|")},y=function(e){return e=v(e),t.String.Literal(e)?e.split("|"):[]},m=function(e){var t,r,n,o;for(e=y(e),n=[],t=0,r=e.length;r>t;t++)o=e[t],-1===n.indexOf(o)&&n.push(o);return n},c=function(e){return/^[A-Z]/.test(e)},l=function(e){return t.Function(e)&&null!=e.typeName&&null!=e.typeNames&&null!=e.typeCheck&&null!=e.typeChecks},e.typed.options={validation:{enable:!1,read:!0,write:!0,target:!1,result:!0,message:void 0},exRead:{"catch":!0,catchTrue:function(e){return e instanceof TypeError},catchFalse:i,useDefault:!1,defaultValue:void 0,defaultFunc:void 0},exWrite:{"catch":!0,catchTrue:function(e){return e instanceof TypeError},catchFalse:i,noThrow:!1,useDefault:!1,defaultValue:void 0,defaultFunc:void 0},pure:!0,deferEvaluation:!0},r=function(){var t,r,o,i,a;for(a=arguments[0],i=2<=arguments.length?n.call(arguments,1):[],t=0,r=i.length;r>t;t++)o=i[t],a=e.utils.extend(a,o);return a},f=function(){var e,t,i,a,u,l;return t=arguments[0],l=arguments[1],a=3<=arguments.length?n.call(arguments,2):[],l[t]=u=r.apply(null,[{}].concat(n.call(function(){var r;r=[];for(e in a)o.call(a,e)&&(i=a[e],r.push(null!=i?i[t]:void 0));return r}()))),u["catch"]===!0?u["catch"]=u.catchTrue:u["catch"]===!1&&(u["catch"]=u.catchFalse),u.useDefault&&null==u.defaultFunc&&(u.defaultFunc=function(){return u.defaultValue}),u},d=function(){var e,t;return t=arguments[0],e=2<=arguments.length?n.call(arguments,1):[],f.apply(null,["exRead",t].concat(n.call(e)))},s=function(){var e,t;return t=arguments[0],e=2<=arguments.length?n.call(arguments,1):[],f.apply(null,["exWrite",t].concat(n.call(e)))},p=function(){var e,t,i,a,u,l;return l=arguments[0],a=2<=arguments.length?n.call(arguments,1):[],t=function(e){return e===!0?{enable:!0}:e===!1?{enable:!1}:e},l.validation=u=r.apply(null,[{}].concat(n.call(function(){var r;r=[];for(e in a)o.call(a,e)&&(i=a[e],r.push(t(null!=i?i.validation:void 0)));return r}()))),u},g=function(e,t,r,n){return function(){var t,o;try{return n()}catch(t){if(o=t,e.exRead["catch"](o)&&(r(o),e.exRead.useDefault))return e.exRead.defaultFunc();throw o}finally{null==o&&r(void 0)}}},w=function(e,t,r,n){return function(o){var i,a;try{return n(o)}catch(i){if(a=i,e.exWrite["catch"](a)&&(r(a),e.exWrite.useDefault&&t(e.exWrite.defaultFunc())),!e.exWrite.noThrow)throw a}finally{null==a&&r(void 0)}}},h=function(t,r,n){var o,i,a;n.validation.enable&&(a=n.validation,(a.target||a.result)&&(a.read||a.write)&&null!=e.validation&&(i=n.validation.read&&n.validation.write?function(){var e,t,n;return null!=(e=null!=(t=r.writeError())?t.message:void 0)?e:null!=(n=r.readError())?n.message:void 0}:n.validation.read?function(){var e;return null!=(e=r.readError())?e.message:void 0}:function(){var e;return null!=(e=r.writeError())?e.message:void 0},o=function(t){var r;t.extend({validatable:{enable:!0}}),r={message:void 0,validator:function(){var e,t;return e=i(),null==e?(r.message=void 0,!0):(r.message=null!=(t=a.message)?t:e,!1)}},e.validation.addAnonymousRule(t,r)},a.target&&o(t),a.result&&o(r)))},e.extenders.type=function(n,i){var a,u,l,f,b,C,S,k,N,x,D,T,E,U;if(t.String.Literal(i)||t.Array(i)?i={type:i}:t.Function(i)&&(i={type:i.typeName,check:i}),f=r({},e.typed.options,e.extenders.type.options,i),d(f,e.typed.options,e.extenders.type.options,i),s(f,e.typed.options,e.extenders.type.options,i),p(f,e.typed.options,e.extenders.type.options,i),i=f,E=y(i.type),E.push.apply(E,function(){var e;e=[];for(l in i)o.call(i,l)&&c(l)&&e.push(l);return e}()),E=m(E),T=v(E),D={},function(){var e,r,n,o;for(o=[],e=0,r=E.length;r>e;e++)l=E[e],o.push(D[l]=null!=(n=i[l])?n:t(l,{returnChecker:!0}));return o}(),N=null!=(C=i.check)?C:function(){return!0},x={},function(){var e,t;t=[];for(l in D)e=D[l],t.push(function(e){return x[l]=function(t){return e(t)&&N(t)}}(e));return t}(),k=function(){return function(e){return N(e)&&(0===E.length||E.some(function(t){return D[t](e)}))}}(),b=e.observable(),U=e.observable(),S=e.computed({pure:i.pure,deferEvaluation:!0,read:g(i,n,b,function(){var e;if(e=n(),!k(e))throw new TypeError("Unexpected internal type. Expected "+T+", got "+t(e));return e}),write:w(i,n,U,function(e){if(!k(e))throw new TypeError("Unexpected external type. Expected "+T+", received "+t(e));n(e)})}),S.typeName=T,S.typeNames=E,S.typeCheck=k,S.typeChecks=x,S.readError=b,S.writeError=U,h(n,S,i),!i.deferEvaluation)try{S.peek()}catch(a){throw u=a,S.dispose(),u}return S},e.extenders.type.options={},e.extenders.convert=function(n,i){var f,y,b,C,S;if(i===!1)return n;if(function(){var a,f,y,h,g,w,b,C,S,k,N,x,D,T,E,U;t.String(i)||t.Array(i)?i={type:i}:i===!0&&(i={}),i=r({},e.typed.options,e.extenders.convert.options,i),C={checkSelf:null!=(S=i.check)?S:u,read:i.read,write:i.write,checks:{},checkers:[],isTyped:l(n),ignoreDefaultConverters:i.ignoreDefaultConverters,pure:i.pure,deferEvaluation:i.deferEvaluation,types:m(i.type)},d(C,e.typed.options,e.extenders.convert.options,i),s(C,e.typed.options,e.extenders.convert.options,i),p(C,e.typed.options,e.extenders.convert.options,i);for(f in i)if(o.call(i,f)&&(y=i[f],c(f))){y=null!=(k=i[f])?k:{},C[f]={checkSelf:y.check,read:y.read,write:y.write,types:m(y.type)};for(g in y)o.call(y,g)&&c(g)&&(w=null!=(N=null!=(x=i[f])?x[g]:void 0)?N:{},C[f][g]={read:w.read,write:w.write})}for(C.type=v(C.types),D=C.types,h=0,b=D.length;b>h;h++)f=D[h],a=null!=(T=null!=(E=null!=(U=C[f])?U.checkSelf:void 0)?E:t(f,{returnChecker:!0}))?T:u,C.checks[f]=function(e){return function(t){return C.checkSelf(t)&&e(t)}}(a),C.checkers.push(C.checks[f]);return C.check=function(e){return C.checkSelf(e)&&(0===C.checkers.length||C.checkers.some(function(t){return t(e)}))},i=C}(),b=e.observable(),S=e.observable(),C=e.computed({pure:i.pure,deferEvaluation:!0,read:g(i,n,b,function(){var r,o,u,l,c,f,d,s,p,y,m,v,h,g,w,b,C,S,k,N;for(y=n(),c=void 0,N=function(e,t){var r,n;if(null!=e){try{c=e(y,t)}catch(r){if(n=r,!(n instanceof TypeError))throw n}if(null==n&&i.check(c))return!0}return!1},u=i.types,0===u.length&&(u=[t(y)]),f=0,h=u.length;h>f;f++)for(o=u[f],l=null!=(b=i[o])?b:{},s=null!=(C=l.types)?C:[],0===s.length&&(s=i.isTyped?n.typeNames:[t(y)]),m=0,g=s.length;g>m;m++)if(d=s[m],!i.isTyped||("function"==typeof(r=n.typeChecks)[d]?r[d](y):void 0))if(p=null!=(S=l[d])?S:{},null!=p.read){if(N(p.read,p.readOptions))return c}else if(d===o){if(null==l.read&&null==i.read&&N(a))return c}else if(!i.ignoreDefaultConverters&&N(e.typed.getConverter(d,o),p.readOptions))return c;for(v=0,w=u.length;w>v;v++)if(o=u[v],l=null!=(k=i[o])?k:{},N(l.read,l.readOptions))return c;if(N(i.read,i.readOptions))return c;throw null!=i.type?new TypeError("Unable to convert from internal type "+t(y)+" to external type "+i.type):new TypeError("Unable to convert from internal type "+t(y))}),write:w(i,n,S,function(r){var o,u,l,c,f,d,s,p,y,m,v,h,g,w,b,C,S;if(S=function(e,t){var o,i,a;if(null!=e){try{a=e(r,t)}catch(o){if(i=o,!(i instanceof TypeError))throw i}if(null==i)return n(a),!0}return!1},null==i.checkSelf||i.checkSelf(r)){for(u=i.types,0===u.length&&(u=[t(r)]),c=0,m=u.length;m>c;c++)if(o=u[c],l=null!=(g=i[o])?g:{},(null==l.checkSelf||l.checkSelf(r))&&(null!=l.checkSelf||t(r,o)))for(d=null!=(w=l.types)?w:[],0===d.length&&(d=i.isTyped?n.typeNames:[t(r)]),p=0,v=d.length;v>p;p++)if(f=d[p],s=null!=(b=l[f])?b:{},null!=s.write){if(S(s.write,s.writeOptions))return}else if(o===f){if(null==l.write&&null==i.write&&(!i.isTyped||n.typeChecks[o](r))&&S(a))return}else if(!i.ignoreDefaultConverters&&S(e.typed.getConverter(o,f),s.writeOptions))return;for(y=0,h=u.length;h>y;y++)if(o=u[y],l=null!=(C=i[o])?C:{},(null==l.checkSelf||l.checkSelf(r))&&(null!=l.checkSelf||t(r,o))&&S(l.write,l.writeOptions))return;if(S(i.write,i.writeOptions))return}throw i.isTyped?new TypeError("Unable to convert from external type "+t(r)+" to internal type "+n.typeName):new TypeError("Unable to convert from external type "+t(r))})}),C.typeName=i.type,C.typeNames=i.types,C.typeCheck=i.check,C.typeChecks=i.checks,C.readError=b,C.writeError=S,h(n,C,i),!i.deferEvaluation)try{C.peek()}catch(f){throw y=f,C.dispose(),y}return C},e.extenders.convert.options={},function(){var r;e.typed._converters=r={},e.typed.addConverter=function(n,o,i,a,u){var l;return"undefined"!=typeof console&&null!==console&&"function"==typeof console.assert&&console.assert(c(n),"Invalid typeName "+n),"undefined"!=typeof console&&null!==console&&"function"==typeof console.assert&&console.assert(c(o),"Invalid typeName "+n),l=null!=a?null!=u?function(r,n){var o;return 2!==arguments.length||t.Object(n)||(o={},o[u]=n,n=o),i(r,e.utils.extend(e.utils.extend({},l.options),n))}:function(t,r){return i(t,e.utils.extend(e.utils.extend({},l.options),r))}:function(e){return i(e)},l.options=a,null==r[n]&&(r[n]={}),r[n][o]=l,e.typed},e.typed.getConverter=function(e,t){var n;return null!=(n=r[e])?n[t]:void 0},e.typed.removeConverter=function(t,n){var o,i;return null!=(null!=(o=r[t])?o[n]:void 0)&&null!=(i=r[t])&&delete i[n],e.typed}}(),function(){var e;e=function(e,t,r){return null==r||0===+r?e(t):(t=+t,r=+r,isNaN(t)||"number"!=typeof r||r%1!==0?NaN:(t=t.toString().split("e"),t=e(+(t[0]+"e"+(t[1]?+t[1]-r:-r))),t=t.toString().split("e"),+(t[0]+"e"+(t[1]?+t[1]+r:r))))},null==Math.round10&&(Math.round10=function(t,r){return e(Math.round,t,r)}),null==Math.floor10&&(Math.floor10=function(t,r){return e(Math.floor,t,r)}),null==Math.ceil10&&(Math.ceil10=function(t,r){return e(Math.ceil,t,r)})}(),e.typed.addConverter("Boolean","Number.Integer",function(e,t){return e?t.truthy:t.falsey},{truthy:1,falsey:0},"truthy"),e.typed.addConverter("Boolean","Number",function(e,t){return e?t.truthy:t.falsey},{truthy:1,falsey:0},"truthy"),e.typed.addConverter("Boolean","String",function(e,t){return e=e?t.truthy:t.falsey,t.upperCase&&(e=e.toUpperCase()),e},{upperCase:!1,truthy:"true",falsey:"false"},"upperCase"),e.typed.addConverter("Date","Moment",function(e,t){return("undefined"!=typeof moment&&null!==moment?moment:require("moment"))(e)}),e.typed.addConverter("Date","String",function(e,t){var r;return isNaN(e.valueOf())?"":(r=t.formats[t.format],e[r].apply(e,t.params))},{formats:{date:"toDateString",iso:"toISOString",json:"toJSON",localeDate:"toLocaleDateString",localeTime:"toLocaleTimeString",locale:"toLocaleString",time:"toTimeString",utc:"toUTCString","default":"toString"},format:"default",params:[]},"format"),e.typed.addConverter("Date","Undefined",function(e,t){if(!isNaN(e.valueOf()))throw new TypeError("Unable to convert from valid Date to Undefined");return void 0}),e.typed.addConverter("Moment","Date",function(e,t){return e.toDate()}),e.typed.addConverter("Moment","String",function(e,t){return e.isValid()?e.locale(t.locale).format(t.format):""},{locale:"en",format:"L"},"format"),e.typed.addConverter("Moment","Undefined",function(e,t){if(e.isValid())throw new TypeError("Unable to convert from valid Moment to Undefined");return void 0}),e.typed.addConverter("Number","Boolean",function(e,t){if(null!=t.falsey&&e===t.falsey)return!1;if(null!=t.truthy&&e===t.truthy)return!0;if(null==t.falsey)return!1;if(null==t.truthy)return!0;throw new TypeError("Cannot convert from "+e+" to Boolean")},{truthy:void 0,falsey:0}),e.typed.addConverter("Number","Number.Integer",function(e,r){var n;if(null==r.mode){if(!t.Number.Integer(e))throw new TypeError("Cannot convert from Number to Number.Integer. Number is not an integer");return e}return(n="string"==typeof r.mode?Math[r.mode]:r.mode)(e)},{mode:void 0},"mode"),e.typed.addConverter("Number","String",function(e,t){return null!=t.decimals?(e=Math.round10(e,-t.decimals),e=e.toFixed(t.decimals)):e=e.toString(),e},{decimals:void 0},"decimals"),e.typed.addConverter("Number.Integer","Boolean",function(e,t){if(null!=t.falsey&&e===t.falsey)return!1;if(null!=t.truthy&&e===t.truthy)return!0;if(null==t.falsey)return!1;if(null==t.truthy)return!0;throw new TypeError("Cannot convert from "+e+" to Boolean")},{truthy:void 0,falsey:0}),e.typed.addConverter("Number.Integer","Number",function(e,t){return e}),e.typed.addConverter("Number.Integer","String",function(e,t){return e=e.toString(t.base),t.upperCase&&(e=e.toUpperCase()),e},{base:10,upperCase:!1},"base"),e.typed.addConverter("String","Boolean",function(e,t){var r,n,o,i,a,u,l,c;if(t.trim&&(e=e.trim()),t.ignoreCase&&(e=e.toLowerCase()),t.strict){if(e===t.truthy[0])return!0;if(e===t.falsey[0])return!1}else{for(u=t.truthy,n=0,i=u.length;i>n;n++)if(c=u[n],e===c)return!0;for(l=t.falsey,o=0,a=l.length;a>o;o++)if(r=l[o],e===r)return!1}throw new TypeError("Cannot convert from "+e+" to Boolean")},{ignoreCase:!0,strict:!1,truthy:["true","t","1","-1","yes","y"],falsey:["false","f","0","no","n"],trim:!1},"strict"),e.typed.addConverter("String","Date",function(e,t){var r,n,o,i,a;if(t.trim&&(e=e.trim()),t.strict){if(n=e.match(t.format),null==n)throw TypeError("Unable to convert from String to Date");o=function(e,t){return null!=e&&""!==e?parseFloat(e):t},a=void 0,null!=n[7]&&""!==n[7]&&(a=60*(60*o(n[t.formatDict.tzHours])+o(n[t.formatDict.tzMinutes]))*1e3,"-"===n[t.formatDict.tzSign]&&(a*=-1)),t.utc||null!=a?(i=Date.UTC(o(n[t.formatDict.year],0),o(n[t.formatDict.month],1)-1,o(n[t.formatDict.day],1),o(n[t.formatDict.hours],0),o(n[t.formatDict.minutes],0),o(n[t.formatDict.seconds],0)),null!=a&&(i+=a),r=new Date(i)):(r=new Date(o(n[t.formatDict.year],0),o(n[t.formatDict.month],1)-1,o(n[t.formatDict.day],1),o(n[t.formatDict.hours],0),o(n[t.formatDict.minutes],0),o(n[t.formatDict.seconds],0)),r.setTime(r.getTime()-60*r.getTimezoneOffset()*1e3))}else r=new Date(e);if(isNaN(r.valueOf()))throw TypeError("Unable to convert from String to Date");return r},{format:/^([0-9]{4})-([0-9]{2})-([0-9]{2})(?:(?:T|\s)([0-9]{2}):([0-9]{2})(?::([0-9]{2}(?:.[0-9]+)?))?(?:(\+|\-)([0-9]{2}):([0-9]{2}))?)?$/,formatDict:{year:1,month:2,day:3,hours:4,minutes:5,seconds:6,tzSign:7,tzHours:8,tzMinutes:9},utc:!1,strict:!0,trim:!1}),e.typed.addConverter("String","Moment",function(e,t){var r;if(t.trim&&(e=e.trim()),r=("undefined"!=typeof moment&&null!==moment?moment:require("moment"))(e,t.format,t.language,t.strict),!r.isValid())throw new TypeError("Unable to convert from String to Moment");return r},{strict:!1,language:"en",format:"L",trim:!1},"format"),e.typed.addConverter("String","Number.Integer",function(t,r){var n,o,i,a;if(r.trim&&(t=t.trim()),10===r.base&&!r.strict)try{return e.typed.getConverter("String","Number")(t,0)}catch(o){throw i=o,new TypeError("Unable to convert from "+t+" to Number.Integer")}if(n="0123456789abcdefghijklmnopqrstuvwxyz",!RegExp("^(\\-|\\+)?["+n.slice(0,null!=(a=r.base)?a:10)+"]+$",r.strict?void 0:"i").test(t))throw new TypeError("Unable to convert from "+t+" to Number.Integer");return parseInt(t,r.base)},{base:10,strict:!1,trim:!1},"base"),e.typed.addConverter("String","Number",function(e,t){if(t.trim&&(e=e.trim()),!/^(\+|\-)?[0-9]+(\.?)[0-9]*$/.test(e))throw new TypeError("Unable to convert from "+e+" to Number");return e=parseFloat(e,t.base),null!=t.decimals&&(e=Math.round10(e,-t.decimals)),e},{decimals:void 0,trim:!1},"decimals"),e.typed.addConverter("String","Undefined",function(e,t){if(t.trim&&(e=e.trim()),0!==e.length)throw new TypeError("Unable to convert from "+e+" to Undefined");return void 0},{trim:!1}),e.typed.addConverter("Undefined","Date",function(e){return new Date(NaN)}),e.typed.addConverter("Undefined","Moment",function(e){return require("moment").invalid()}),e.typed.addConverter("Undefined","String",function(e){return""}),e},r(e),e});
//# sourceMappingURL=data:application/json;base64,
