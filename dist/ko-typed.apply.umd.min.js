!function(e,t){"function"==typeof define&&define.amd?define(["is-an"],t):"object"==typeof exports?module.exports=t(require("is-an")):e.applyKotr=t(e.isAn)}(this,function(e){var t,r={}.hasOwnProperty;return t=function(t){var n,o,u,i,a;return i=function(t){return null==t||0===t.length?void 0:e.String.Literal(t)?t:t.join("|")},u=function(t){return t=i(t),e.String.Literal(t)?t.split("|"):[]},o=function(e){return/^[A-Z]/.test(e)},n=function(t){return e.Function(t)&&null!=t.typeName&&null!=t.typeNames&&null!=t.typeCheck&&null!=t.typeChecks},a=function(e,r){var n,o;if(r.validate)return o=void 0,n=function(){var n,u,i,a;return null!=t.validation&&t.validation.utils.isValidatable(e)?(n=null!=(u=r.message)?u:null!=(i=null!=(a=e.typeWriteError())?a:e.typeReadError())?i.message:void 0,null==o?(o={message:n,validator:function(){return null==e.typeWriteError()&&null==e.typeReadError()}},t.validation.addAnonymousRule(e,o)):(o.message=n,e.rules.valueHasMutated())):void 0},e.typeWriteError.subscribe(n),e.typeReadError.subscribe(n),null!=t.validation&&e.extend({validatable:!0}),r.deferEvaluation?void 0:n()},t.extenders.type=function(n,l){var f,c,d,s,p;return e.String.Literal(l)||e.Array(l)?l={type:l}:e.Function(l)&&(l={type:l.typeName,check:l}),l=t.utils.extend(t.utils.extend({},t.extenders.type.options),l),l.useDefault&&null==l.defaultFunc&&(l.defaultFunc=function(){return l["default"]}),p=u(l.type),function(){var e,t,n;n=[];for(t in l)r.call(l,t)&&(e=l[t],o(t)&&(-1===p.indexOf(t)?n.push(p.push(t)):n.push(void 0)));return n}(),s=i(p),d={},function(){var t,r,n,o,u;for(u=[],t=0,r=p.length;r>t;t++)n=p[t],u.push(d[n]=null!=(o=l[n])?o:e(n,{returnChecker:!0}));return u}(),c=function(){var e,t;return e=null!=(t=l.check)?t:function(){return!0},function(t){return e(t)&&(0===p.length||p.some(function(e){return d[e](t)}))}}(),f=t.computed({pure:l.pure,deferEvaluation:l.deferEvaluation,read:function(){var t,r,o;try{if(o=n(),!c(o))throw new TypeError("Unexpected internal type. Expected "+s+", got "+e(o))}catch(t){if(r=t,r instanceof TypeError&&(f.typeReadError(r),l.useDefault))return l.defaultFunc();throw r}return f.typeReadError(void 0),o},write:function(t){var r,o;try{if(!c(t))throw new TypeError("Unexpected external type. Expected "+s+", received "+e(t));n(t)}catch(r){if(o=r,o instanceof TypeError&&(f.typeWriteError(o),l.noThrow))return;throw o}return f.typeWriteError(void 0)}}),f.typeName=s,f.typeNames=p,f.typeCheck=c,f.typeChecks=d,f.typeWriteError=t.observable(),f.typeReadError=t.observable(),a(f,l),l.pure&&!l.deferEvaluation&&f(),f},t.extenders.type.options={validate:!0,message:void 0,noThrow:!1,useDefault:!1,pure:!0,deferEvaluation:!0},t.extenders.convert=function(l,f){var c;return function(){var a,c,d,s,p,y,h,v,m,g,w,C,b,k,E,S,N,T;(e.String(f)||e.Array(f))&&(f={type:f}),f=t.utils.extend(t.utils.extend({},t.extenders.convert.options),f),s={checkSelf:null!=(w=f.check)?w:function(){return!0},read:f.read,write:f.write,checks:{},checkers:[],isTyped:n(l),ignoreDefaultConverters:f.ignoreDefaultConverters,pure:f.pure,deferEvaluation:f.deferEvaluation,defaultFunc:f.defaultFunc,noThrow:f.noThrow,message:f.message,useDefault:f.useDefault},s.useDefault&&null==f.defaultFunc&&(s["default"]=f["default"],s.defaultFunc=function(){return s["default"]}),s.checkers.push(s.checkSelf),s.types=u(f.type);for(c in f)r.call(f,c)&&o(c)&&-1===s.types.indexOf(c)&&s.types.push(c);for(C=s.types,p=0,m=C.length;m>p;p++){c=C[p],d=null!=(b=f[c])?b:{},s[c]={checkSelf:null!=(k=null!=(E=d.check)?E:e(c,{returnChecker:!0}))?k:function(){return!0},read:d.read,write:d.write,types:u(d.type)},a=s.checkSelf,s.checkers.push(s[c].checkSelf),s.checks[c]=s[c].check=function(e){return function(t){return s.checkSelf(t)&&s[e].checkSelf(t)}}(c);for(y in d)r.call(d,y)&&o(y)&&-1===s[c].types.indexOf(y)&&s[c].types.push(y);for(S=s[c].types,v=0,g=S.length;g>v;v++)y=S[v],h=null!=(N=null!=(T=f[c])?T[y]:void 0)?N:{},s[c][y]={checkSelf:h.check,read:h.read,write:h.write},null==s[c][y].checkSelf?s[c][y].check=s[c][y].checkSelf=s[c].checkSelf:s[c][y].check=function(e,t){return function(r){return s[e].check(r)&&s[e][t].checkSelf(r)}}(c,y);s[c].type=i(s[c].types)}return s.type=i(s.types),s.check=function(e){return s.checkSelf(e)&&(0===s.checkers.length||s.checkers.some(function(t){return t(e)}))},f=s}(),c=t.computed({pure:f.pure,deferEvaluation:f.deferEvaluation,read:function(){var r,n,o,u,i,a,d,s,p,y,h,v,m,g,w,C,b,k,E,S;try{for(h=l(),a=void 0,S=function(e,t){var r,n;if(null!=e){try{a=e(h,t)}catch(r){if(n=r,!(n instanceof TypeError))throw n}if(null==n)return!0}return!1},b=f.types,d=0,g=b.length;g>d;d++)for(u=b[d],i=f[u],p=i.types,0===p.length&&null==i.read&&(p=f.isTyped?l.typeNames:[e(h)]),v=0,w=p.length;w>v;v++){if(s=p[v],f.isTyped){if(!("function"==typeof(r=l.typeChecks)[s]?r[s](h):void 0))continue}else if(!e(h,s))continue;if(y=null!=(k=i[s])?k:{check:i.check},S(y.read,y.readOptions)&&y.check(a))return a;if(u===s&&y.check(h))return a=h;if(!f.ignoreDefaultConverters&&S(t.typed.getConverter(s,u),y.readOptions)&&y.check(a))return a}for(E=f.types,m=0,C=E.length;C>m;m++)if(u=E[m],i=f[u],S(i.read,i.readOptions)&&i.check(a))return a;if(S(f.read,f.readOptions)&&f.check(a))return a;if(0===f.types.length&&f.check(a))return a=h;throw null!=f.type?new TypeError("Unable to convert from internal type "+e(h)+" to external type "+f.type):new TypeError("Unable to convert from internal type "+e(h))}catch(n){if(o=n,o instanceof TypeError&&(c.typeReadError(o),f.useDefault))return f.defaultFunc();throw o}finally{null==o&&c.typeReadError(void 0)}},write:function(r){var n,o,u,i,a,d,s,p,y,h,v,m,g,w,C,b,k;try{for(k=function(e,t){var n,o,u;if(null!=e){try{u=e(r,t)}catch(n){if(o=n,!(o instanceof TypeError))throw o}if(null==o)return l(u),!0}return!1},w=f.types,a=0,v=w.length;v>a;a++)if(u=w[a],i=f[u],i.check(r))for(s=i.types,0===s.length&&null==i.write&&(s=f.isTyped?l.typeNames:[e(r)]),y=0,m=s.length;m>y;y++)if(d=s[y],p=null!=(C=i[d])?C:{},null==p.check||p.check(r)){if(k(p.write,p.writeOptions))return;if(u===d)return void l(r);if(!f.ignoreDefaultConverters&&k(t.typed.getConverter(u,d),p.writeOptions))return}for(b=f.types,h=0,g=b.length;g>h;h++)if(u=b[h],i=f[u],i.check(r)&&k(i.write,i.writeOptions))return;if(f.check(r)){if(k(f.write,f.writeOptions))return;if(0===f.types.length)return void l(r)}throw f.isTyped?new TypeError("Unable to convert from external type "+e(r)+" to internal type "+l.typeName):new TypeError("Unable to convert from external type "+e(r))}catch(n){if(o=n,o instanceof TypeError&&(c.typeWriteError(o),f.noThrow))return;throw o}finally{null==o&&c.typeWriteError(void 0)}}}),c.typeName=f.type,c.typeNames=f.types,c.typeCheck=f.check,c.typeChecks=f.checks,c.typeReadError=t.observable(),c.typeWriteError=t.observable(),a(c,f),f.pure&&!f.deferEvaluation&&c(),c},t.extenders.convert.options={validate:!0,message:void 0,noThrow:!1,pure:!0,deferEvaluation:!0},t.typed={},function(){var r;t.typed._converters=r={},t.typed.addConverter=function(n,u,i,a,l){var f;return"undefined"!=typeof console&&null!==console&&"function"==typeof console.assert&&console.assert(o(n),"Invalid typeName "+n),"undefined"!=typeof console&&null!==console&&"function"==typeof console.assert&&console.assert(o(u),"Invalid typeName "+n),f=null!=a?null!=l?function(r,n){var o;return null==n||e.Object(n)||(o={},o[l]=n,n=o),i(r,t.utils.extend(t.utils.extend({},f.options),n))}:function(e,r){return i(e,t.utils.extend(t.utils.extend({},f.options),r))}:function(e){return i(e)},f.options=a,null==r[n]&&(r[n]={}),r[n][u]=f,t.typed},t.typed.getConverter=function(e,t){var n;return null!=(n=r[e])?n[t]:void 0},t.typed.removeConverter=function(e,n){var o,u;return null!=(null!=(o=r[e])?o[n]:void 0)&&null!=(u=r[e])&&delete u[n],t.typed}}(),function(){var e;e=function(e,t,r){return null==r||0===+r?e(t):(t=+t,r=+r,isNaN(t)||"number"!=typeof r||r%1!==0?NaN:(t=t.toString().split("e"),t=e(+(t[0]+"e"+(t[1]?+t[1]-r:-r))),t=t.toString().split("e"),+(t[0]+"e"+(t[1]?+t[1]+r:r))))},null==Math.round10&&(Math.round10=function(t,r){return e(Math.round,t,r)}),null==Math.floor10&&(Math.floor10=function(t,r){return e(Math.floor,t,r)}),null==Math.ceil10&&(Math.ceil10=function(t,r){return e(Math.ceil,t,r)})}(),t.typed.addConverter("Boolean","Number.Integer",function(e,t){return e?t.truthy:t.falsey},{truthy:1,falsey:0},"truthy"),t.typed.addConverter("Boolean","Number",function(e,t){return e?t.truthy:t.falsey},{truthy:1,falsey:0},"truthy"),t.typed.addConverter("Boolean","String",function(e,t){return e=e?t.truthy:t.falsey,t.upperCase&&(e=e.toUpperCase()),e},{upperCase:!1,truthy:"true",falsey:"false"},"upperCase"),t.typed.addConverter("Date","Moment",function(e,t){return("undefined"!=typeof moment&&null!==moment?moment:require("moment"))(e)}),t.typed.addConverter("Date","String",function(e,t){var r;return isNaN(e.valueOf())?"":(r=t.formats[t.format],e[r].apply(e,t.params))},{formats:{date:"toDateString",iso:"toISOString",json:"toJSON",localeDate:"toLocaleDateString",localeTime:"toLocaleTimeString",locale:"toLocaleString",time:"toTimeString",utc:"toUTCString","default":"toString"},format:"default",params:[]},"format"),t.typed.addConverter("Date","Undefined",function(e,t){if(!isNaN(e.valueOf()))throw new TypeError("Unable to convert from valid Date to Undefined");return void 0}),t.typed.addConverter("Moment","Date",function(e,t){return e.toDate()}),t.typed.addConverter("Moment","String",function(e,t){return e.isValid()?e.locale(t.locale).format(t.format):""},{strict:!1,locale:"en",format:"L"},"format"),t.typed.addConverter("Moment","Undefined",function(e,t){if(e.isValid())throw new TypeError("Unable to convert from valid Moment to Undefined");return void 0}),t.typed.addConverter("Number","Boolean",function(e,t){if(null!=t.falsey&&e===t.falsey)return!1;if(null!=t.truthy&&e===t.truthy)return!0;if(null==t.falsey)return!1;if(null==t.truthy)return!0;throw new TypeError("Cannot convert from "+e+" to Boolean")},{truthy:void 0,falsey:0}),t.typed.addConverter("Number","Number.Integer",function(e,t){var r;return(r="string"==typeof t.mode?Math[t.mode]:t.mode)(e)},{mode:"round"},"mode"),t.typed.addConverter("Number","String",function(e,t){return null!=t.decimals?(e=Math.round10(e,-t.decimals),e=e.toFixed(t.decimals)):e=e.toString(),e},{decimals:void 0},"decimals"),t.typed.addConverter("Number.Integer","Boolean",function(e,t){if(null!=t.falsey&&e===t.falsey)return!1;if(null!=t.truthy&&e===t.truthy)return!0;if(null==t.falsey)return!1;if(null==t.truthy)return!0;throw new TypeError("Cannot convert from "+e+" to Boolean")},{truthy:void 0,falsey:0}),t.typed.addConverter("Number.Integer","Number",function(e,t){return e}),t.typed.addConverter("Number.Integer","String",function(e,t){return e=e.toString(t.base),t.upperCase&&(e=e.toUpperCase()),e},{base:10,upperCase:!1},"base"),t.typed.addConverter("String","Boolean",function(e,t){var r,n,o,u,i,a,l,f;if(t.trim&&(e=e.trim()),t.ignoreCase&&(e=e.toLowerCase()),t.strict){if(e===t.truthy[0])return!0;if(e===t.falsey[0])return!1}else{for(a=t.truthy,n=0,u=a.length;u>n;n++)if(f=a[n],e===f)return!0;for(l=t.falsey,o=0,i=l.length;i>o;o++)if(r=l[o],e===r)return!1}throw new TypeError("Cannot convert from "+e+" to Boolean")},{ignoreCase:!0,strict:!1,truthy:["true","t","1","-1","yes","y"],falsey:["false","f","0","no","n"],trim:!1},"strict"),t.typed.addConverter("String","Date",function(e,t){var r;if(t.trim&&(e=e.trim()),r=new Date(e),isNaN(r.valueOf()))throw TypeError("Unable to convert from "+e+" to Date");return r},{trim:!1}),t.typed.addConverter("String","Moment",function(e,t){var r;if(t.trim&&(e=e.trim()),r=("undefined"!=typeof moment&&null!==moment?moment:require("moment"))(e,t.format,t.language,t.strict),!r.isValid())throw new TypeError("Unable to convert from "+e+" to Moment");return r},{strict:!1,language:"en",format:"L",trim:!1},"format"),t.typed.addConverter("String","Number.Integer",function(e,r){var n,o,u,i;if(r.trim&&(e=e.trim()),10===r.base&&!r.strict)try{return t.typed.getConverter("String","Number")(e,0)}catch(o){throw u=o,new TypeError("Unable to convert from "+e+" to Number.Integer")}if(n="0123456789abcdefghijklmnopqrstuvwxyz",!RegExp("^(\\-|\\+)?["+n.slice(0,null!=(i=r.base)?i:10)+"]+$",r.strict?void 0:"i").test(e))throw new TypeError("Unable to convert from "+e+" to Number.Integer");return parseInt(e,r.base)},{base:10,strict:!1,trim:!1},"base"),t.typed.addConverter("String","Number",function(e,t){if(t.trim&&(e=e.trim()),!/^(\+|\-)?[0-9]+(\.?)[0-9]*$/.test(e))throw new TypeError("Unable to convert from "+e+" to Number");return e=parseFloat(e,t.base),null!=t.decimals&&(e=Math.round10(e,-t.decimals)),e},{decimals:void 0,trim:!1},"decimals"),t.typed.addConverter("String","Undefined",function(e,t){if(t.trim&&(e=e.trim()),0!==e.length)throw new TypeError("Unable to convert from "+e+" to Undefined");return void 0},{trim:!1}),t.typed.addConverter("Undefined","Date",function(e){return new Date("")}),t.typed.addConverter("Undefined","String",function(e){return""}),t.typed.addConverter("Undefined","Moment",function(e){return require("moment")("")}),t}});
//# sourceMappingURL=data:application/json;base64,
