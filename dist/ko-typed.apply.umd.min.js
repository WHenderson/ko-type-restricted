!function(e,t){"function"==typeof define&&define.amd?define(["is-an"],t):"object"==typeof exports?module.exports=t(require("is-an")):e.applyKotr=t(e.isAn)}(this,function(e){var t,r=[].slice,n={}.hasOwnProperty;return t=function(t){var o,a,i,u,l,c,f,d,s,p,y,m,v,h,g,w;return t.typed={},u=function(){return!0},a=function(){return!1},i=function(e){return e},v=function(t){return null==t||0===t.length?void 0:e.String.Literal(t)?t:t.join("|")},y=function(t){return t=v(t),e.String.Literal(t)?t.split("|"):[]},m=function(e){var t,r,n,o;for(e=y(e),n=[],t=0,r=e.length;r>t;t++)o=e[t],-1===n.indexOf(o)&&n.push(o);return n},c=function(e){return/^[A-Z]/.test(e)},l=function(t){return e.Function(t)&&null!=t.typeName&&null!=t.typeNames&&null!=t.typeCheck&&null!=t.typeChecks},t.typed.options={validation:{enable:!1,read:!0,write:!0,target:!1,result:!0,message:void 0},exRead:{"catch":!0,catchTrue:function(e){return e instanceof TypeError},catchFalse:a,useDefault:!1,defaultValue:void 0,defaultFunc:void 0},exWrite:{"catch":!0,catchTrue:function(e){return e instanceof TypeError},catchFalse:a,noThrow:!1,useDefault:!1,defaultValue:void 0,defaultFunc:void 0},pure:!0,deferEvaluation:!0},o=function(){var e,n,o,a,i;for(i=arguments[0],a=2<=arguments.length?r.call(arguments,1):[],e=0,n=a.length;n>e;e++)o=a[e],i=t.utils.extend(i,o);return i},f=function(){var e,t,a,i,u,l;return t=arguments[0],l=arguments[1],i=3<=arguments.length?r.call(arguments,2):[],l[t]=u=o.apply(null,[{}].concat(r.call(function(){var r;r=[];for(e in i)n.call(i,e)&&(a=i[e],r.push(null!=a?a[t]:void 0));return r}()))),u["catch"]===!0?u["catch"]=u.catchTrue:u["catch"]===!1&&(u["catch"]=u.catchFalse),u.useDefault&&null==u.defaultFunc&&(u.defaultFunc=function(){return u.defaultValue}),u},d=function(){var e,t;return t=arguments[0],e=2<=arguments.length?r.call(arguments,1):[],f.apply(null,["exRead",t].concat(r.call(e)))},s=function(){var e,t;return t=arguments[0],e=2<=arguments.length?r.call(arguments,1):[],f.apply(null,["exWrite",t].concat(r.call(e)))},p=function(){var e,t,a,i,u,l;return l=arguments[0],i=2<=arguments.length?r.call(arguments,1):[],t=function(e){return e===!0?{enable:!0}:e===!1?{enable:!1}:e},l.validation=u=o.apply(null,[{}].concat(r.call(function(){var r;r=[];for(e in i)n.call(i,e)&&(a=i[e],r.push(t(null!=a?a.validation:void 0)));return r}()))),u},g=function(e,t,r,n){return function(){var t,o;try{return n()}catch(t){if(o=t,e.exRead["catch"](o)&&(r(o),e.exRead.useDefault))return e.exRead.defaultFunc();throw o}finally{null==o&&r(void 0)}}},w=function(e,t,r,n){return function(o){var a,i;try{return n(o)}catch(a){if(i=a,e.exWrite["catch"](i)&&(r(i),e.exWrite.useDefault&&t(e.exWrite.defaultFunc())),!e.exWrite.noThrow)throw i}finally{null==i&&r(void 0)}}},h=function(e,r,n){var o,a,i;n.validation.enable&&(i=n.validation,(i.target||i.result)&&(i.read||i.write)&&null!=t.validation&&(a=n.validation.read&&n.validation.write?function(){var e,t,n;return null!=(e=null!=(t=r.writeError())?t.message:void 0)?e:null!=(n=r.readError())?n.message:void 0}:n.validation.read?function(){var e;return null!=(e=r.readError())?e.message:void 0}:function(){var e;return null!=(e=r.writeError())?e.message:void 0},o=function(e){var r;e.extend({validatable:{enable:!0}}),r={message:void 0,validator:function(){var e,t;return e=a(),null==e?(r.message=void 0,!0):(r.message=null!=(t=i.message)?t:e,!1)}},t.validation.addAnonymousRule(e,r)},i.target&&o(e),i.result&&o(r)))},t.extenders.type=function(r,a){var i,u,l,f,b,C,S,N,x,D,T,k,E,U;if(e.String.Literal(a)||e.Array(a)?a={type:a}:e.Function(a)&&(a={type:a.typeName,check:a}),f=o({},t.typed.options,t.extenders.type.options,a),d(f,t.typed.options,t.extenders.type.options,a),s(f,t.typed.options,t.extenders.type.options,a),p(f,t.typed.options,t.extenders.type.options,a),a=f,E=y(a.type),E.push.apply(E,function(){var e;e=[];for(l in a)n.call(a,l)&&c(l)&&e.push(l);return e}()),E=m(E),k=v(E),T={},function(){var t,r,n,o;for(o=[],t=0,r=E.length;r>t;t++)l=E[t],o.push(T[l]=null!=(n=a[l])?n:e(l,{returnChecker:!0}));return o}(),x=null!=(C=a.check)?C:function(){return!0},D={},function(){var e,t;t=[];for(l in T)e=T[l],t.push(function(e){return D[l]=function(t){return e(t)&&x(t)}}(e));return t}(),N=function(){return function(e){return x(e)&&(0===E.length||E.some(function(t){return T[t](e)}))}}(),b=t.observable(),U=t.observable(),S=t.computed({pure:a.pure,deferEvaluation:!0,read:g(a,r,b,function(){var t;if(t=r(),!N(t))throw new TypeError("Unexpected internal type. Expected "+k+", got "+e(t));return t}),write:w(a,r,U,function(t){if(!N(t))throw new TypeError("Unexpected external type. Expected "+k+", received "+e(t));r(t)})}),S.typeName=k,S.typeNames=E,S.typeCheck=N,S.typeChecks=D,S.readError=b,S.writeError=U,h(r,S,a),!a.deferEvaluation)try{S.peek()}catch(i){throw u=i,S.dispose(),u}return S},t.extenders.type.options={},t.extenders.convert=function(r,a){var f,y,b,C,S;if(a===!1)return r;if(function(){var i,f,y,h,g,w,b,C,S,N,x,D,T,k,E,U;e.String(a)||e.Array(a)?a={type:a}:a===!0&&(a={}),a=o({},t.typed.options,t.extenders.convert.options,a),C={checkSelf:null!=(S=a.check)?S:u,read:a.read,write:a.write,checks:{},checkers:[],isTyped:l(r),ignoreDefaultConverters:a.ignoreDefaultConverters,pure:a.pure,deferEvaluation:a.deferEvaluation,types:m(a.type)},d(C,t.typed.options,t.extenders.convert.options,a),s(C,t.typed.options,t.extenders.convert.options,a),p(C,t.typed.options,t.extenders.convert.options,a);for(f in a)if(n.call(a,f)&&(y=a[f],c(f))){y=null!=(N=a[f])?N:{},C[f]={checkSelf:y.check,read:y.read,write:y.write,types:m(y.type)};for(g in y)n.call(y,g)&&c(g)&&(w=null!=(x=null!=(D=a[f])?D[g]:void 0)?x:{},C[f][g]={read:w.read,write:w.write})}for(C.type=v(C.types),T=C.types,h=0,b=T.length;b>h;h++)f=T[h],i=null!=(k=null!=(E=null!=(U=C[f])?U.checkSelf:void 0)?E:e(f,{returnChecker:!0}))?k:u,C.checks[f]=function(e){return function(t){return C.checkSelf(t)&&e(t)}}(i),C.checkers.push(C.checks[f]);return C.check=function(e){return C.checkSelf(e)&&(0===C.checkers.length||C.checkers.some(function(t){return t(e)}))},a=C}(),b=t.observable(),S=t.observable(),C=t.computed({pure:a.pure,deferEvaluation:!0,read:g(a,r,b,function(){var n,o,u,l,c,f,d,s,p,y,m,v,h,g,w,b,C,S,N,x;for(y=r(),c=void 0,x=function(e,t){var r,n;if(null!=e){try{c=e(y,t)}catch(r){if(n=r,!(n instanceof TypeError))throw n}if(null==n&&a.check(c))return!0}return!1},u=a.types,0===u.length&&(u=[e(y)]),f=0,h=u.length;h>f;f++)for(o=u[f],l=null!=(b=a[o])?b:{},s=null!=(C=l.types)?C:[],0===s.length&&(s=a.isTyped?r.typeNames:[e(y)]),m=0,g=s.length;g>m;m++)if(d=s[m],!a.isTyped||("function"==typeof(n=r.typeChecks)[d]?n[d](y):void 0))if(p=null!=(S=l[d])?S:{},null!=p.read){if(x(p.read,p.readOptions))return c}else if(d===o){if(null==l.read&&null==a.read&&x(i))return c}else if(!a.ignoreDefaultConverters&&x(t.typed.getConverter(d,o),p.readOptions))return c;for(v=0,w=u.length;w>v;v++)if(o=u[v],l=null!=(N=a[o])?N:{},x(l.read,l.readOptions))return c;if(x(a.read,a.readOptions))return c;throw null!=a.type?new TypeError("Unable to convert from internal type "+e(y)+" to external type "+a.type):new TypeError("Unable to convert from internal type "+e(y))}),write:w(a,r,S,function(n){var o,u,l,c,f,d,s,p,y,m,v,h,g,w,b,C,S;if(S=function(e,t){var o,a,i;if(null!=e){try{i=e(n,t)}catch(o){if(a=o,!(a instanceof TypeError))throw a}if(null==a)return r(i),!0}return!1},null==a.checkSelf||a.checkSelf(n)){for(u=a.types,0===u.length&&(u=[e(n)]),c=0,m=u.length;m>c;c++)if(o=u[c],l=null!=(g=a[o])?g:{},(null==l.checkSelf||l.checkSelf(n))&&(null!=l.checkSelf||e(n,o)))for(d=null!=(w=l.types)?w:[],0===d.length&&(d=a.isTyped?r.typeNames:[e(n)]),p=0,v=d.length;v>p;p++)if(f=d[p],s=null!=(b=l[f])?b:{},null!=s.write){if(S(s.write,s.writeOptions))return}else if(o===f){if(null==l.write&&null==a.write&&(!a.isTyped||r.typeChecks[o](n))&&S(i))return}else if(!a.ignoreDefaultConverters&&S(t.typed.getConverter(o,f),s.writeOptions))return;for(y=0,h=u.length;h>y;y++)if(o=u[y],l=null!=(C=a[o])?C:{},(null==l.checkSelf||l.checkSelf(n))&&(null!=l.checkSelf||e(n,o))&&S(l.write,l.writeOptions))return;if(S(a.write,a.writeOptions))return}throw a.isTyped?new TypeError("Unable to convert from external type "+e(n)+" to internal type "+r.typeName):new TypeError("Unable to convert from external type "+e(n))})}),C.typeName=a.type,C.typeNames=a.types,C.typeCheck=a.check,C.typeChecks=a.checks,C.readError=b,C.writeError=S,h(r,C,a),!a.deferEvaluation)try{C.peek()}catch(f){throw y=f,C.dispose(),y}return C},t.extenders.convert.options={},function(){var r;t.typed._converters=r={},t.typed.addConverter=function(n,o,a,i,u){var l;return"undefined"!=typeof console&&null!==console&&"function"==typeof console.assert&&console.assert(c(n),"Invalid typeName "+n),"undefined"!=typeof console&&null!==console&&"function"==typeof console.assert&&console.assert(c(o),"Invalid typeName "+n),l=null!=i?null!=u?function(r,n){var o;return 2!==arguments.length||e.Object(n)||(o={},o[u]=n,n=o),a(r,t.utils.extend(t.utils.extend({},l.options),n))}:function(e,r){return a(e,t.utils.extend(t.utils.extend({},l.options),r))}:function(e){return a(e)},l.options=i,null==r[n]&&(r[n]={}),r[n][o]=l,t.typed},t.typed.getConverter=function(e,t){var n;return null!=(n=r[e])?n[t]:void 0},t.typed.removeConverter=function(e,n){var o,a;return null!=(null!=(o=r[e])?o[n]:void 0)&&null!=(a=r[e])&&delete a[n],t.typed}}(),function(){var e;e=function(e,t,r){return null==r||0===+r?e(t):(t=+t,r=+r,isNaN(t)||"number"!=typeof r||r%1!==0?NaN:(t=t.toString().split("e"),t=e(+(t[0]+"e"+(t[1]?+t[1]-r:-r))),t=t.toString().split("e"),+(t[0]+"e"+(t[1]?+t[1]+r:r))))},null==Math.round10&&(Math.round10=function(t,r){return e(Math.round,t,r)}),null==Math.floor10&&(Math.floor10=function(t,r){return e(Math.floor,t,r)}),null==Math.ceil10&&(Math.ceil10=function(t,r){return e(Math.ceil,t,r)})}(),t.typed.addConverter("Boolean","Number.Integer",function(e,t){return e?t.truthy:t.falsey},{truthy:1,falsey:0},"truthy"),t.typed.addConverter("Boolean","Number",function(e,t){return e?t.truthy:t.falsey},{truthy:1,falsey:0},"truthy"),t.typed.addConverter("Boolean","String",function(e,t){return e=e?t.truthy:t.falsey,t.upperCase&&(e=e.toUpperCase()),e},{upperCase:!1,truthy:"true",falsey:"false"},"upperCase"),t.typed.addConverter("Date","Moment",function(e,t){return("undefined"!=typeof moment&&null!==moment?moment:require("moment"))(e)}),t.typed.addConverter("Date","String",function(e,t){var r;return isNaN(e.valueOf())?"":(r=t.formats[t.format],e[r].apply(e,t.params))},{formats:{date:"toDateString",iso:"toISOString",json:"toJSON",localeDate:"toLocaleDateString",localeTime:"toLocaleTimeString",locale:"toLocaleString",time:"toTimeString",utc:"toUTCString","default":"toString"},format:"default",params:[]},"format"),t.typed.addConverter("Date","Undefined",function(e,t){if(!isNaN(e.valueOf()))throw new TypeError("Unable to convert from valid Date to Undefined")}),t.typed.addConverter("Moment","Date",function(e,t){return e.toDate()}),t.typed.addConverter("Moment","String",function(e,t){return e.isValid()?e.locale(t.locale).format(t.format):""},{locale:"en",format:"L"},"format"),t.typed.addConverter("Moment","Undefined",function(e,t){if(e.isValid())throw new TypeError("Unable to convert from valid Moment to Undefined")}),t.typed.addConverter("Number","Boolean",function(e,t){if(null!=t.falsey&&e===t.falsey)return!1;if(null!=t.truthy&&e===t.truthy)return!0;if(null==t.falsey)return!1;if(null==t.truthy)return!0;throw new TypeError("Cannot convert from "+e+" to Boolean")},{truthy:void 0,falsey:0}),t.typed.addConverter("Number","Number.Integer",function(t,r){var n;if(null==r.mode){if(!e.Number.Integer(t))throw new TypeError("Cannot convert from Number to Number.Integer. Number is not an integer");return t}return(n="string"==typeof r.mode?Math[r.mode]:r.mode)(t)},{mode:void 0},"mode"),t.typed.addConverter("Number","String",function(e,t){return null!=t.decimals?(e=Math.round10(e,-t.decimals),e=e.toFixed(t.decimals)):e=e.toString(),e},{decimals:void 0},"decimals"),t.typed.addConverter("Number.Integer","Boolean",function(e,t){if(null!=t.falsey&&e===t.falsey)return!1;if(null!=t.truthy&&e===t.truthy)return!0;if(null==t.falsey)return!1;if(null==t.truthy)return!0;throw new TypeError("Cannot convert from "+e+" to Boolean")},{truthy:void 0,falsey:0}),t.typed.addConverter("Number.Integer","Number",function(e,t){return e}),t.typed.addConverter("Number.Integer","String",function(e,t){return e=e.toString(t.base),t.upperCase&&(e=e.toUpperCase()),e},{base:10,upperCase:!1},"base"),t.typed.addConverter("String","Boolean",function(e,t){var r,n,o,a,i,u,l,c;if(t.trim&&(e=e.trim()),t.ignoreCase&&(e=e.toLowerCase()),t.strict){if(e===t.truthy[0])return!0;if(e===t.falsey[0])return!1}else{for(u=t.truthy,n=0,a=u.length;a>n;n++)if(c=u[n],e===c)return!0;for(l=t.falsey,o=0,i=l.length;i>o;o++)if(r=l[o],e===r)return!1}throw new TypeError("Cannot convert from "+e+" to Boolean")},{ignoreCase:!0,strict:!1,truthy:["true","t","1","-1","yes","y"],falsey:["false","f","0","no","n"],trim:!1},"strict"),t.typed.addConverter("String","Date",function(e,t){var r,n,o,a,i;if(t.trim&&(e=e.trim()),t.strict){if(n=e.match(t.format),null==n)throw TypeError("Unable to convert from String to Date");o=function(e,t){return null!=e&&""!==e?parseFloat(e):t},i=void 0,null!=n[7]&&""!==n[7]&&(i=60*(60*o(n[t.formatDict.tzHours])+o(n[t.formatDict.tzMinutes]))*1e3,"-"===n[t.formatDict.tzSign]&&(i*=-1)),t.utc||null!=i?(a=Date.UTC(o(n[t.formatDict.year],0),o(n[t.formatDict.month],1)-1,o(n[t.formatDict.day],1),o(n[t.formatDict.hours],0),o(n[t.formatDict.minutes],0),o(n[t.formatDict.seconds],0)),null!=i&&(a+=i),r=new Date(a)):(r=new Date(o(n[t.formatDict.year],0),o(n[t.formatDict.month],1)-1,o(n[t.formatDict.day],1),o(n[t.formatDict.hours],0),o(n[t.formatDict.minutes],0),o(n[t.formatDict.seconds],0)),r.setTime(r.getTime()-60*r.getTimezoneOffset()*1e3))}else r=new Date(e);if(isNaN(r.valueOf()))throw TypeError("Unable to convert from String to Date");return r},{format:/^([0-9]{4})-([0-9]{2})-([0-9]{2})(?:(?:T|\s)([0-9]{2}):([0-9]{2})(?::([0-9]{2}(?:.[0-9]+)?))?(?:(\+|\-)([0-9]{2}):([0-9]{2}))?)?$/,formatDict:{year:1,month:2,day:3,hours:4,minutes:5,seconds:6,tzSign:7,tzHours:8,tzMinutes:9},utc:!1,strict:!0,trim:!1}),t.typed.addConverter("String","Moment",function(e,t){var r;if(t.trim&&(e=e.trim()),r=("undefined"!=typeof moment&&null!==moment?moment:require("moment"))(e,t.format,t.language,t.strict),!r.isValid())throw new TypeError("Unable to convert from String to Moment");return r},{strict:!1,language:"en",format:"L",trim:!1},"format"),t.typed.addConverter("String","Number.Integer",function(e,r){var n,o,a,i;if(r.trim&&(e=e.trim()),10===r.base&&!r.strict)try{return t.typed.getConverter("String","Number")(e,0)}catch(o){throw a=o,new TypeError("Unable to convert from "+e+" to Number.Integer")}if(n="0123456789abcdefghijklmnopqrstuvwxyz",!RegExp("^(\\-|\\+)?["+n.slice(0,null!=(i=r.base)?i:10)+"]+$",r.strict?void 0:"i").test(e))throw new TypeError("Unable to convert from "+e+" to Number.Integer");return parseInt(e,r.base)},{base:10,strict:!1,trim:!1},"base"),t.typed.addConverter("String","Number",function(e,t){if(t.trim&&(e=e.trim()),!/^(\+|\-)?[0-9]+(\.?)[0-9]*$/.test(e))throw new TypeError("Unable to convert from "+e+" to Number");return e=parseFloat(e,t.base),null!=t.decimals&&(e=Math.round10(e,-t.decimals)),e},{decimals:void 0,trim:!1},"decimals"),t.typed.addConverter("String","Undefined",function(e,t){if(t.trim&&(e=e.trim()),0!==e.length)throw new TypeError("Unable to convert from "+e+" to Undefined")},{trim:!1}),t.typed.addConverter("Undefined","Date",function(e){return new Date(NaN)}),t.typed.addConverter("Undefined","Moment",function(e){return require("moment").invalid()}),t.typed.addConverter("Undefined","String",function(e){return""}),t}});
//# sourceMappingURL=data:application/json;base64,
